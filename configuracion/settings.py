"""
Django settings for configuracion project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import datetime
from pathlib import Path
from environs import Env
from celery.schedules import crontab


env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Rest Framework
    "rest_framework",
    "drf_yasg",
    "rest_framework_simplejwt",
    # Third party libraries
    "django_celery_beat",
    # Apps
    "apps.webApp",
    "apps.backoffice",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "querycount.middleware.QueryCountMiddleware",
]

ROOT_URLCONF = "configuracion.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "configuracion.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": env.str("DB_ENGINE"),
        "NAME": "cheaf-db",
        "USER": env.str("DB_USER"),
        "PASSWORD": env.str("DB_PASSWORD"),
        "HOST": env.str("DB_HOST"),
        "PORT": env.str("DB_PORT"),
    }
}

print(
    f"Conectado con el usuario {DATABASES['default']['USER']} a "
    f"{DATABASES['default']['HOST']}/{DATABASES['default']['NAME']}"
)

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "backoffice.Administrator"

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 1000,
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

SIMPLE_JWT = {
    # how long the original token is valid for
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(days=2),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=7),
}

SWAGGER_SETTINGS = {
    # 'USE_SESSION_AUTH': False,
    "SECURITY_DEFINITIONS": {
        "Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}
    }
}

from celery import Celery

celery_app = Celery("configuracion")
# Configuración de Celery mediante la configuración de Django
celery_app.config_from_object("django.conf:settings", namespace="CELERY")

# Buscar tareas en todos los módulos de la aplicación y registrarlas automáticamente
celery_app.autodiscover_tasks()


# Configuración de Celery
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"

# Cronjobs Celery
CELERY_BEAT_SCHEDULE = {
    "create_alarms_task": {
        "task": "api.adapters.primaries.products.tasks.create_product_alarms",
        "schedule": datetime.timedelta(hours=4),
    },
    "send_notifications_daily": {
        "task": "api.adapters.primaries.products.tasks.send_notifications_for_today_alarms",
        "schedule": crontab(hour=0, minute=0),
    },
}

# email settings
EMAIL_BACKEND = (env.str("EMAIL_BACKEND"),)
EMAIL_HOST = (env.str("EMAIL_HOST"),)
EMAIL_PORT = (env.str("EMAIL_PORT"),)
EMAIL_USE_TLS = (env.str("EMAIL_USE_TLS"),)
EMAIL_HOST_USER = (env.str("EMAIL_HOST_USER"),)
EMAIL_HOST_PASSWORD = (env.str("EMAIL_HOST_PASSWORD"),)

# OSGeo4W settings
# Set the GDAL and GEOS library paths
try:
    GDAL_LIBRARY_PATH = os.path.join(os.environ["OSGEO4W_ROOT"], "bin", "gdal306.dll")
    GEOS_LIBRARY_PATH = os.path.join(os.environ["OSGEO4W_ROOT"], "bin", "geos_c.dll")
except KeyError:
    print("Working without OSGEO4W")
    GDAL_LIBRARY_PATH = os.environ.get("GDAL_LIBRARY_PATH")
    GEOS_LIBRARY_PATH = os.environ.get("GEOS_LIBRARY_PATH")

    # Add the paths to the system path
    if GDAL_LIBRARY_PATH and os.path.exists(GDAL_LIBRARY_PATH):
        os.environ["PATH"] = (
            os.path.dirname(GDAL_LIBRARY_PATH) + ":" + os.environ["PATH"]
        )

    if GEOS_LIBRARY_PATH and os.path.exists(GEOS_LIBRARY_PATH):
        os.environ["LD_LIBRARY_PATH"] = (
            os.path.dirname(GEOS_LIBRARY_PATH)
            + ":"
            + os.environ.get("LD_LIBRARY_PATH", "")
        )
